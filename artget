#!/usr/local/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2014, Berk Özbalcı
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# 
# * Redistributions in binary form must reproduce the above copyright notice, this
#   list of conditions and the following disclaimer in the documentation and/or
#   other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import mpd
import requests
import argparse
import sys
import os

api = "http://ws.audioscrobbler.com"
key = "a76e4f3f6a9e81f45a943509437a125f"

def fetch_art(artist, album, size, autocorrect):
   if not size in range(1, 6):
      print "Size must be between 1 and 5."
      sys.exit(1)

   payload = {
      'api_key': key,
      'artist' : artist,
      'album' : album,
      'autocorrect' : int(autocorrect),
      'format' : 'json'
   }
   
   try:
      r = requests.get(api + "/2.0/?method=album.getinfo", params=payload)
   except (requests.exceptions.ConnectionError,
         requests.exceptions.HTTPError,
         requests.exceptions.Timeout):
      print "Couldn't connect to Last.fm."
      sys.exit(1)

   data = r.json()
   images = None
   url = None

   try:
      data['album']
   except KeyError:
      print "This album doesn't seem to have a Last.fm page."
      sys.exit(1)

   try:
      images = data['album']['image']
   except KeyError:
      print "This album doesn't seem to have art on Last.fm."
      sys.exit(1)

   try:
      url = images[size - 1]['#text']
   except KeyError:
      try:
         url = images[size - 2]['#text']
      except KeyError:
         print "No album art of size " + size + " or " + size - 1 + "."
         sys.exit(1)

   if url == '':
      print "This album doesn't seem to have art on Last.fm."
      sys.exit(1)

   try:
      r = requests.get(url)
   except (requests.exceptions.ConnectionError,
         requests.exceptions.HTTPError,
         requests.exceptions.Timeout):
      print "There was an error retrieving album art from Last.fm."
   return r.content

def download_art(image, path):
   try:
      with open(path, 'wb') as fd:
         fd.write(image)
   except IOError:
      print "Couldn't save to file: " + path
      sys.exit(1)

if __name__ == '__main__':
   parser = argparse.ArgumentParser(prog='artget',
         description='Fetch album arts from Last.fm, has MPD support.',
         epilog='If --artist and --album are specified, it will take'
            ' priority over the currently playing song.')
   parser.add_argument('-s', '--size', type=int, default=3,
         help='between 1 and 5, pick size for image file (3)')
   parser.add_argument('-o', '--output', type=str, default='cover.jpg',
         help='filename to save the downloaded album art')
   parser.add_argument('-a', '--artist', type=str, help='Look for this artist',
         default='')
   parser.add_argument('-b', '--album', type=str, help='Look for this album', default='')
   parser.add_argument('-n', '--hostname', type=str, default='localhost',
         help='specify hostname for the MPD server (localhost)')
   parser.add_argument('-p', '--port', type=int, default=6600,
         help='specify port for the MPD server (6600)')
   parser.add_argument('-r', '--root', type=str, default="~/music/",
         help='MPD music directory (useful with --to-music-dir')
   parser.add_argument('-N', '--no-autocorrect', action='store_false', dest='autocorrect',
         help='do not use autocorrect by Last.fm')
   parser.add_argument('-A', '--album-artist', action='store_true', dest='albumartist',
         help='prefer albumartist tag on the current playing album')
   parser.add_argument('-t', '--to-music-dir', action='store_true', dest='tomusicdir',
         help='save album art to the music directory (only if it exists)')
   args = parser.parse_args()
   
   client = mpd.MPDClient(use_unicode=True)
   try:
      client.connect(args.hostname, args.port)
   except:
      print "Could not connect to the MPD server."
      sys.exit(1)

   artist, album, songdir = (None, None, None)
   output = args.output # output is to be changed soon

   if args.artist != '':
      if args.album == '':
         print "If you specify --artist, you must also specify --album!"
         sys.exit(1)
      else:
         artist = args.artist
         album = args.album
         if args.tomusicdir:
            output = os.path.join(os.path.expanduser(args.root),
                  artist, album, args.output)
   if args.album != '':
      if args.artist == '':
         print "If you specify --album, you must also specify --artist!"
         sys.exit(1)
      else:
         artist = args.artist
         album = args.album
   if args.artist == '' and args.album == '':
      song = client.currentsong()
      if song == {}:
         print "No song is playing at the moment."
         sys.exit(1)
      artist = song['artist']
      if args.albumartist:
         artist = song['artist']
      album = song['album']
      if args.tomusicdir:
         output = os.path.join(os.path.expanduser(args.root),
               os.path.dirname(song['file']), args.output)

   image = fetch_art(artist, album, args.size, args.autocorrect)
   download_art(image, output)
